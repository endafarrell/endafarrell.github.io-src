<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>endafarrell.net - Other code</title><link href="http://endafarrell.net/" rel="alternate"></link><link href="http://endafarrell.net/feeds/other-code.atom.xml" rel="self"></link><id>http://endafarrell.net/</id><updated>2013-02-03T00:00:00+01:00</updated><entry><title>Note to self: sharing the best photos</title><link href="http://endafarrell.net/note-to-self-sharing-the-best-photos.html" rel="alternate"></link><published>2013-02-03T00:00:00+01:00</published><updated>2013-02-03T00:00:00+01:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2013-02-03:/note-to-self-sharing-the-best-photos.html</id><summary type="html">&lt;p&gt;We take quite a few photos and I'm forever reinventing how I look after them. Here's where I am at at the moment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Photos come from a few different cameras&lt;/li&gt;
&lt;li&gt;Aperture (now 3.2.4) is what we use to manage them&lt;/li&gt;
&lt;li&gt;All photos/videos are imported&lt;/li&gt;
&lt;li&gt;Good ones get …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;We take quite a few photos and I'm forever reinventing how I look after them. Here's where I am at at the moment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Photos come from a few different cameras&lt;/li&gt;
&lt;li&gt;Aperture (now 3.2.4) is what we use to manage them&lt;/li&gt;
&lt;li&gt;All photos/videos are imported&lt;/li&gt;
&lt;li&gt;Good ones get a 3 start rating, very good a 4 and the best a 5.&lt;/li&gt;
&lt;li&gt;Rejected, one and two star photos are deleted - unrated get to live for another day&lt;/li&gt;
&lt;li&gt;I export full size JPGs to my ~/Pictures/ApertureExports into subdirectories for each year.&lt;/li&gt;
&lt;li&gt;After exporting I use (the very excellent) &lt;a href="http://www.sno.phy.queensu.ca/~phil/exiftool/"&gt;exiftool&lt;/a&gt;
    to change the ctime of the file to be the photos's Original Datetime: (see the code block below)&lt;/li&gt;
&lt;li&gt;I have a &lt;a href="http://www.readynas.com/?cat=3"&gt;ReadyNAS&lt;/a&gt; server for backups.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I mount the NAS and rsync the exports: (see the code block below)&lt;/p&gt;
&lt;p&gt;exiftool "-filemodifydate&amp;lt;datetimeoriginal" .&lt;/p&gt;
&lt;p&gt;rsync -rv --delete --progress --times \
    /Users/Shared/ApertureExports/ \
    /Volumes/nasmedia/Pictures/BestApertureExports/&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="photos"></category><category term="rsync"></category><category term="library"></category><category term="manage"></category><category term="aperture"></category><category term="nas"></category></entry><entry><title>Gawking out</title><link href="http://endafarrell.net/gawking-out.html" rel="alternate"></link><published>2012-08-24T00:00:00+02:00</published><updated>2012-08-24T00:00:00+02:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2012-08-24:/gawking-out.html</id><summary type="html">&lt;p&gt;&lt;img alt="awk logo" src="http://endafarrell.net/images/gawking-out.jpg" style="float: left; margin-right: 7px;"&gt; I've been 
processing log files recently to see how a live system is 
being used. When you have millions of hits daily, you need these processors to be fast.&lt;/p&gt;
&lt;p&gt;Today the best way is to have your log files shipped over onto a Hadoop cluster and map-reduce them: but sometimes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="awk logo" src="http://endafarrell.net/images/gawking-out.jpg" style="float: left; margin-right: 7px;"&gt; I've been 
processing log files recently to see how a live system is 
being used. When you have millions of hits daily, you need these processors to be fast.&lt;/p&gt;
&lt;p&gt;Today the best way is to have your log files shipped over onto a Hadoop cluster and map-reduce them: but sometimes 
there's still a call for quick scripts. Here awk is a king :-)&lt;/p&gt;
&lt;h2&gt;Converting to a HTML table&lt;/h2&gt;
&lt;p&gt;I couldn't find a decent online version of converting a CSV into a HTML table - but with awk it's easy. Here's the 
awk script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;BEGIN&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;table&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="nx"&gt;HDR&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="kr"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;tr&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;NF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;td&amp;gt;%s&amp;lt;/td&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kr"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/tr&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nb"&gt;END&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kr"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;/table&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes use of the field separator handling of awk: so a CSV can be converted into a simple HTML table like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat stats.csv &lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
awk -F&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; -f 2Table.awk &lt;span class="se"&gt;\&lt;/span&gt;
--assign &lt;span class="nv"&gt;HDR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;A&amp;gt;/th&amp;gt;...&amp;lt;/tr&amp;gt;&amp;quot;&lt;/span&gt; &amp;gt; stats.html
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Summing distinct rows&lt;/h2&gt;
&lt;p&gt;So the best way to describe this is to show an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;IP1 GET url1 200 32&lt;/span&gt;
&lt;span class="err"&gt;IP2 GET url1 200 29&lt;/span&gt;
&lt;span class="err"&gt;IP1 GET url1 200 21&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The "distinct rows" here would be "IP1 GET url1 200" and "IP2 GET url1 200". You could think of these as just a few 
entries of the access_logs. Anyway, I wanted to sum together the times that these calls were taking (the last column). 
Sometimes the number of fields varied so a general solution was needed.&lt;/p&gt;
&lt;p&gt;The desired output is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;IP1 GET url1 200 53&lt;/span&gt;
&lt;span class="err"&gt;IP2 GET url1 200 29&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and the script to do this is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# Grab the value&lt;/span&gt;
    &lt;span class="nx"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;NF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="c1"&gt;# Strip the value - $0 no longer has the value&lt;/span&gt;
    &lt;span class="nb"&gt;NF&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# Increments the value at hash[$0] or creates it&lt;/span&gt;
    &lt;span class="c1"&gt;# if not already present.&lt;/span&gt;
    &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;num&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;END&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ndx&lt;/span&gt; &lt;span class="o"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kr"&gt;print&lt;/span&gt; &lt;span class="nx"&gt;ndx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ndx&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="work"></category><category term="awk"></category><category term="unix"></category><category term="ops"></category><category term="gawk"></category></entry><entry><title>"grep -o" - really quite useful</title><link href="http://endafarrell.net/grep-o-really-quite-useful.html" rel="alternate"></link><published>2011-12-30T00:00:00+01:00</published><updated>2011-12-30T00:00:00+01:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2011-12-30:/grep-o-really-quite-useful.html</id><summary type="html">&lt;p&gt;One really quite useful command is “grep -o” - it allows you to fire off something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -o &lt;span class="s2"&gt;&amp;quot;Location supplier=\&amp;quot;\w*\&amp;quot;&amp;quot;&lt;/span&gt; locations.xml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the output will be the phrases matching the regular expressions that start with “Location supplier=” with a double 
quoted word (\w) in the locations.xml …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One really quite useful command is “grep -o” - it allows you to fire off something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep -o &lt;span class="s2"&gt;&amp;quot;Location supplier=\&amp;quot;\w*\&amp;quot;&amp;quot;&lt;/span&gt; locations.xml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the output will be the phrases matching the regular expressions that start with “Location supplier=” with a double 
quoted word (\w) in the locations.xml file. :-) &lt;/p&gt;</content><category term="grep"></category><category term="unix"></category><category term="utilities"></category></entry><entry><title>Piping content through SSH</title><link href="http://endafarrell.net/piping-content-through-ssh.html" rel="alternate"></link><published>2011-12-08T00:00:00+01:00</published><updated>2011-12-08T00:00:00+01:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2011-12-08:/piping-content-through-ssh.html</id><summary type="html">&lt;p&gt;Thanks to &lt;a href=""&gt;http://www.contentwithstyle.co.uk/content/4-ssh-config-tips-for-faster-remote-working/&lt;/a&gt; I can avoid 
creating files which need to be scp’d: I can pipe the content directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;local$ cat localfile.txt &lt;span class="p"&gt;|&lt;/span&gt; ssh remote &lt;span class="s2"&gt;&amp;quot;cat - &amp;gt;&amp;gt; remotefile.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For this to work, I have already got “remote” set up in my &lt;code&gt;~/.ssh/config …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks to &lt;a href=""&gt;http://www.contentwithstyle.co.uk/content/4-ssh-config-tips-for-faster-remote-working/&lt;/a&gt; I can avoid 
creating files which need to be scp’d: I can pipe the content directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;local$ cat localfile.txt &lt;span class="p"&gt;|&lt;/span&gt; ssh remote &lt;span class="s2"&gt;&amp;quot;cat - &amp;gt;&amp;gt; remotefile.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For this to work, I have already got “remote” set up in my &lt;code&gt;~/.ssh/config&lt;/code&gt;. You can get much more involved in this: 
see&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;http://backdrift.org/transparent-proxy-with-ssh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;http://www.cyberciti.biz/faq/howto-use-tar-command-through-network-over-ssh-session/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;http://scratching.psybermonkey.net/2011/02/ssh-how-to-pipe-output-from-local-to.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;My favourite example from the last site (execute commands on remote server but save the output to local) is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh user@example.com &lt;span class="s2"&gt;&amp;quot;mysqldump -u DB_username -pDB_password DB_name | gzip -c&amp;quot;&lt;/span&gt; &amp;gt; /local/dir/DB_backup.gz
&lt;/pre&gt;&lt;/div&gt;</content><category term="proxy"></category><category term="ssh"></category><category term="unix"></category><category term="utilities"></category></entry><entry><title>Tools to play with</title><link href="http://endafarrell.net/tools-to-play-with.html" rel="alternate"></link><published>2010-09-26T00:00:00+02:00</published><updated>2010-09-26T00:00:00+02:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2010-09-26:/tools-to-play-with.html</id><summary type="html">&lt;p&gt;From listening to &lt;a href="http://thechangelog.com/"&gt;The Changelog&lt;/a&gt; for the first time today I should play with 
&lt;a href="http://developer.yahoo.com/yql/"&gt;Yahoo’s YQL&lt;/a&gt;. It’s a server developer tool 
that allows you to query the web in a SQL-like format - and have the results come back in JSON. Where it gets really 
cool is when you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;From listening to &lt;a href="http://thechangelog.com/"&gt;The Changelog&lt;/a&gt; for the first time today I should play with 
&lt;a href="http://developer.yahoo.com/yql/"&gt;Yahoo’s YQL&lt;/a&gt;. It’s a server developer tool 
that allows you to query the web in a SQL-like format - and have the results come back in JSON. Where it gets really 
cool is when you mash-up different sites - then things become really useful. &lt;/p&gt;</content><category term="play-with"></category><category term="podcast"></category><category term="the-changelog"></category><category term="yahoo!"></category><category term="yql"></category></entry><entry><title>Runtime disabling of TestNG groups</title><link href="http://endafarrell.net/runtime-disabling-of-testng-groups.html" rel="alternate"></link><published>2010-06-03T00:00:00+02:00</published><updated>2010-06-03T00:00:00+02:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2010-06-03:/runtime-disabling-of-testng-groups.html</id><summary type="html">&lt;p&gt;We have recently started to use TestNG and I like it. One thing that is needed is runtime control over whether or not to 
run a group of tests.&lt;/p&gt;
&lt;p&gt;We have both unit tests and integration tests to assure ourselves of the system’s health. Running the integration tests 
requires …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We have recently started to use TestNG and I like it. One thing that is needed is runtime control over whether or not to 
run a group of tests.&lt;/p&gt;
&lt;p&gt;We have both unit tests and integration tests to assure ourselves of the system’s health. Running the integration tests 
requires running databases (CouchDB in this case) but we don’t - by policy - have databases running on the continuous 
integration Hudson server. There are of course other approaches to dealing with this, but we have found this works well 
for us.&lt;/p&gt;
&lt;p&gt;Oh - and we need to have just one POM. So no&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;disabledGroups&amp;gt;&lt;/span&gt;system&lt;span class="nt"&gt;&amp;lt;/disabledGroups&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;for us.
We only want the “integration” group of tests to run when the local environment variable “SERVER_ENV” has the value of 
dev. The following code causes these to be skipped (at least as of 5.12.1):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;@BeforeGroups(groups = {&amp;quot;integration&amp;quot;})
public void checkEnvIsDev() throws Exception {
    boolean isDev = (&amp;quot;dev&amp;quot;.equals(System.getenv(&amp;quot;SERVER_ENV&amp;quot;)));
    if (!isDev) throw new SkipException(&amp;quot;Skip the \&amp;quot;integration\&amp;quot; group as $SERVER_ENV is not \&amp;quot;dev\&amp;quot;.&amp;quot;);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This may be a new feature, but it seems that as the SkipException is thrown, the entire group is skipped.&lt;/p&gt;
&lt;p&gt;Nice.&lt;/p&gt;</content><category term="code"></category><category term="java"></category><category term="testng"></category></entry><entry><title>I'm quoted at a recent Google Tech Talk</title><link href="http://endafarrell.net/im-quoted-at-a-recent-google-tech-talk.html" rel="alternate"></link><published>2010-03-07T00:00:00+01:00</published><updated>2010-03-07T00:00:00+01:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2010-03-07:/im-quoted-at-a-recent-google-tech-talk.html</id><summary type="html">&lt;p&gt;It’s nice to be quoted - by J Chris Anderson at a Google tech talk last December.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=ESDBM9-U804"&gt;CouchDB: relaxing offline javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;16:30 in is the start of my contribution&lt;/p&gt;</summary><content type="html">&lt;p&gt;It’s nice to be quoted - by J Chris Anderson at a Google tech talk last December.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=ESDBM9-U804"&gt;CouchDB: relaxing offline javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;16:30 in is the start of my contribution&lt;/p&gt;</content><category term="bbc-forge"></category><category term="couchdb"></category></entry><entry><title>CouchDB compaction - big impacts</title><link href="http://endafarrell.net/couchdb-compaction-big-impacts.html" rel="alternate"></link><published>2009-12-08T20:20:00+01:00</published><updated>2009-12-08T20:20:00+01:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2009-12-08:/couchdb-compaction-big-impacts.html</id><summary type="html">&lt;p&gt;CouchDB needs to have it’s databases compacted regularly. It’s quite easy to do but the ease of doing so may lead you 
into thinking that it’s not worthy of serious consideration. You need to be aware of a few things.&lt;/p&gt;
&lt;p&gt;Here at the beeb we have many …&lt;/p&gt;</summary><content type="html">&lt;p&gt;CouchDB needs to have it’s databases compacted regularly. It’s quite easy to do but the ease of doing so may lead you 
into thinking that it’s not worthy of serious consideration. You need to be aware of a few things.&lt;/p&gt;
&lt;p&gt;Here at the beeb we have many databases of very differing sizes, with very different “busy times” and to be honest we 
don’t really know nor care what data is in them. Some documents are very simple, some we know are serialised PHP 
objects, some are JSON base64 encodings of images (we do not allow attachments) - some docs are less than 50 bytes, 
some are pushing 1 meg. Some databases have their busy times at 2am - others with the broadcast on the weekends of 
television shows.&lt;/p&gt;
&lt;p&gt;We had a bug in some code a while ago (not CouchDB code) that meant we wanted to not compact our databases for a while. 
Ordinarily we compact daily - but for one namespace (renamed as “brain test” below) we wanted to keep all previous 
versions of data for a while (and still do so I did not compact it yesterday). As it was a “hmm - we need to do a 
one-off here” I compacted everything (nearly together) instead of our system code’s more gentle “one at a time” 
approach.&lt;/p&gt;
&lt;p&gt;Here are some charts so see what happened.&lt;/p&gt;
&lt;p&gt;This chart is going to take some explaining:
&lt;img alt="complex chart of sizes and compaction ratios" src="http://endafarrell.net/images/2009/CouchDB-compaction.1.png"&gt;&lt;/p&gt;
&lt;p&gt;Think of it like a stock chart: the blue is the “volume” - the overall size on disk of the database. Its axis is on the 
left drawn on a log scale given the range of sizes. The biggest was ~ 150 GB, the smallest 80k - but it’s not really 
that important here.&lt;/p&gt;
&lt;p&gt;The top of the red bar is the relative size of the database before the compaction started - that’s why they are all
 “one” on the right-hand axis. The bottom of the red bar is the relative size of the database after the compaction 
 finished. Some of the databases did not compact much, some compacted down to about 2% of their original size. &lt;/p&gt;
&lt;p&gt;The thin black lines going up are the amount of space that the compaction took during the process. For namespaces that 
compact really well, that line is short and the “high tide mark” of the amount of space used is not much above the 
opening size. However - for namespaces that do not compact well - this high tide mark is as big as the original 
database. More on this watch-point later. &lt;/p&gt;
&lt;p&gt;So - what can we see here? &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The biggest - “big page” - saved 32% of its space - it ended up at about 100 GB in the end.&lt;/li&gt;
&lt;li&gt;“a cache” which was the second biggest compacted REALLY well - due essentially to the very high number of revisions 
  that some of its keys had. It started at 129 gig - finished at 7 gig. That was really quite a nice saving.&lt;/li&gt;
&lt;li&gt;I didn’t compact “brain test” so it finished up the same size - but look at it’s “high” bar. If I had compacted 
  it - it would have take up quite a bit of space. The high bar ought not be there as it didn’t undergo the 
  taking-up-more-space-temporarily compaction process - it’s a flaw in my spreadsheet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you look at the red bars, you can see that most databases compact well - but small ones look like they don’t. This 
is because small ones are not being revised much - there’s very little going on in them so there’s little changing and 
hence little for the compactor to free up.&lt;/p&gt;
&lt;p&gt;So that’s the good news. Now the bad.&lt;/p&gt;
&lt;p&gt;Here’s what the process did to one of our 16 servers handling the CouchDB data:&lt;/p&gt;
&lt;p&gt;&lt;img alt="cluster load" src="http://endafarrell.net/images/2009/CouchDB-compaction.2.png"&gt;
&lt;img alt="cluster cpu" src="http://endafarrell.net/images/2009/CouchDB-compaction.3.png"&gt;
&lt;img alt="cluster io" src="http://endafarrell.net/images/2009/CouchDB-compaction.4.png"&gt;&lt;/p&gt;
&lt;p&gt;For two hours on these 8 core (2 x quad-core DL-380s) machines were taking a thumping. The ops crew came wandering over 
wondering what’s going on. They know that big HTTP traffic can cause load on these boxes but high load without traffic? 
That’s odd.&lt;/p&gt;
&lt;p&gt;I don’t have the charts that show the slower response times that this causes on the users of the service but they’ll 
look a bit like the load graph.&lt;/p&gt;
&lt;p&gt;What can we take from this?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compact regularly - but only if the amount of free space on your drives is greater than the size of your biggest 
  database. This is a hard limit that your “capacity planning” must take into account&lt;/li&gt;
&lt;li&gt;It can save you a lot of space&lt;/li&gt;
&lt;li&gt;It will heavily load your servers - perhaps for quite a while&lt;/li&gt;
&lt;li&gt;Tell your ops crew that this will happen and that they can expect this sort of load&lt;/li&gt;
&lt;/ul&gt;</content><category term="bbc-forge"></category><category term="compaction"></category><category term="CouchDB"></category><category term="ops"></category><category term="work"></category><category term="NoSQL"></category></entry><entry><title>Problems with replication maps</title><link href="http://endafarrell.net/problems-with-replication-maps.html" rel="alternate"></link><published>2009-11-24T00:00:00+01:00</published><updated>2009-11-24T00:00:00+01:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2009-11-24:/problems-with-replication-maps.html</id><summary type="html">&lt;p&gt;For a long set of reasons that I must sometime write about, I have a set of CouchDB databases which replicate with 
each other. Each database replicates with two others: one in the same datacentre, one in the other datacentre (we’re 
only running with two datacentres at the moment …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a long set of reasons that I must sometime write about, I have a set of CouchDB databases which replicate with 
each other. Each database replicates with two others: one in the same datacentre, one in the other datacentre (we’re 
only running with two datacentres at the moment). One is to do with resiliance the other with response capability.&lt;/p&gt;
&lt;p&gt;Anyway - having two or more replications is not a problem with CouchDB (if you’re careful) - even with our version 0.9x.&lt;/p&gt;
&lt;h2&gt;Lacking symmetry&lt;/h2&gt;
&lt;p&gt;However - we may not have been as careful as we’d have wished: look at these numbers:&lt;/p&gt;
&lt;p&gt;&lt;img alt="a well-balanced set of servers in different datacentres" src="http://endafarrell.net/images/2009/Problems-with-replication-maps.1.png"&gt; &lt;/p&gt;
&lt;p&gt;Here we see that the replication maps have datacentre symmetry - the data in each node in the two data centres are the 
same. Apart from the very slight increase in DC2’s data - because I took those numbers about 5 min after the first DC. 
This set of data (one of 15 which we have today) is growing at 0.3% per 5 min.&lt;/p&gt;
&lt;p&gt;However - some nodes have 200,000 docs - others none at all - something is amiss.&lt;/p&gt;
&lt;p&gt;The datacentres give us the capacity to handle requests in our platform, but we also have replications within each 
datacentre for resilience. Each node should be either a primary or a fallback node, and we should have resilience 
symmetry - but look at what we actually have when we align the primary and fallbacks:&lt;/p&gt;
&lt;p&gt;&lt;img alt="servers without fallbacks across datacentres" src="http://endafarrell.net/images/2009/Problems-with-replication-maps.2.png"&gt; &lt;/p&gt;
&lt;p&gt;Ouch - this does not look symmetrical at all!&lt;/p&gt;
&lt;p&gt;Here’s where the problem lies - a bug in the config:&lt;/p&gt;
&lt;p&gt;&lt;img alt="misconfigured replication mappings" src="http://endafarrell.net/images/2009/Problems-with-replication-maps.3.png"&gt; &lt;/p&gt;
&lt;p&gt;Here we can see a few problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;two of our nodes appear as both Primary and as Fallback nodes&lt;/li&gt;
&lt;li&gt;two of our nodes are unused&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Fixing these problems&lt;/h2&gt;
&lt;p&gt;The first thing to do is not to correct the bug in the config - it’s to write tests that can spot this happening. This
way we can help ensure that someone coming behind us does not end up in the same situation again. We can even write 
these as runtime tests - not just unit tests - so that in the future if we have dynamic config reloading we can test 
it’ll be A-OK.&lt;/p&gt;
&lt;p&gt;Second will then be to actually fix the config - quite easy in this case - and get it rolled out to production. This 
will then fill the unused nodes with the appropriate data.&lt;/p&gt;
&lt;p&gt;Third will be to reshard everything - which has (in our system) the side-effect of deleting data from places that it 
ought not be. However - we do need to be careful that we do not have unexpected side effects.&lt;/p&gt;
&lt;p&gt;The two nodes that appear as both primary and fallback (kv003:5986 and kv004:5987) have too much data as they get 
their “own” data and they were incorrectly replicated into too. Here’s how the other two nodes got out of hand.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Data is correctly added to the primary node kv001:5987.&lt;/span&gt;
&lt;span class="err"&gt;Replication sent a copy from kv001:5987 to kv004:5987.&lt;/span&gt;
&lt;span class="err"&gt;Unsymmetric replication sent a copy from kv004:5987 to kv002:5987&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Hence kv002:5987 has too much data. Here is the same story for kv001:5986.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;Data is correctly added to the primary node kv002:5986.&lt;/span&gt;
&lt;span class="err"&gt;Replication sent a copy from kv002:5986 to kv003:5986.&lt;/span&gt;
&lt;span class="err"&gt;Unsymmetric replication sent a copy from kv003:5986 to kv001:5986.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we reshard, we will unexpectedly find data on kv003:5986 and kv004:5987 - and they’ll be deleted (on the code 
that we have). CouchDB replication will also delete the data from those nodes’ replication pair - so we’ll end up 
with appropriately populated databases.&lt;/p&gt;
&lt;p&gt;To ease the problems of the time it takes to reshard, you might be tempted to simply look at the data found on 
kv003:5986 and kv004:5987 (one quarter of the full set) and reshard those - and you’d be correct. In the fix - in 
order to balance the load across the nodes - kv002:5986 will be demoted to be a fallback and kv004:5986 will be 
promoted to be a full primary node as shown here:&lt;/p&gt;
&lt;p&gt;&lt;img alt="correctly-configured replication mappings" src="http://endafarrell.net/images/2009/Problems-with-replication-maps.4.png"&gt; &lt;/p&gt;
&lt;p&gt;However - there’s more.&lt;/p&gt;
&lt;h2&gt;DNS, VIPs and things that can go wrong&lt;/h2&gt;
&lt;p&gt;Alas, if the above really was the source of the problem we wouldn't have fallen into it. You see, for the resilience 
to work we need the primary and fallback nodes to “flip” automatically - for this we have some carp magic doing its 
work. Of course, for that to be picked up by the Tomcat layer above, DNS CNAMES must be used. &lt;/p&gt;
&lt;p&gt;This table is horrible - so sorry - but it shows what is there now and by assuming that we need to keep everything 
symmetrical - an excellent assumption - we can spot what needs to change. It essentially shows how to fix the problem.&lt;/p&gt;
&lt;p&gt;&lt;img alt="unreadably-small set of entries" src="http://endafarrell.net/images/2009/Problems-with-replication-maps.5.png"&gt; &lt;/p&gt;
&lt;p&gt;In the yellow box we see the nodes that are both primary and fallback and the nodes that are unused. The fix - in the 
green - shows the newly bolded fallback changes that most simply fix the problem. It was important that we were able 
to “simply” find the fix by only changing the fallback nodes - we avoid a potentially long-running and danger-fraught 
resharding of lots more data. &lt;/p&gt;</content><category term="bbc-forge"></category><category term="config"></category><category term="CouchDB"></category><category term="work"></category></entry><entry><title>CouchDB 0.9x - 1st read from v large views serially</title><link href="http://endafarrell.net/couchdb-09x-1st-read-from-v-large-views-serially.html" rel="alternate"></link><published>2009-11-05T20:20:00+01:00</published><updated>2009-11-05T20:20:00+01:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2009-11-05:/couchdb-09x-1st-read-from-v-large-views-serially.html</id><summary type="html">&lt;p&gt;On a server, we run 4 different CouchDB nodes, each with 30 or so databases. We can therefore have over 100 databases - 
and if you’re reading from large views - or view over large databases - you will need to do so serially.&lt;/p&gt;
&lt;p&gt;We have 4 as “normally” CouchDB is kind …&lt;/p&gt;</summary><content type="html">&lt;p&gt;On a server, we run 4 different CouchDB nodes, each with 30 or so databases. We can therefore have over 100 databases - 
and if you’re reading from large views - or view over large databases - you will need to do so serially.&lt;/p&gt;
&lt;p&gt;We have 4 as “normally” CouchDB is kind re it’s use of memory, and kind in terms of CPU usage (we have 8-core machines 
here). Yes - there is a headache re being disk-IO bound, but it’s not normally a problem.&lt;/p&gt;
&lt;p&gt;But views are now needed (to identify conflicting docs) as we have many applications using our KV service in both of 
our datacentres. And adding them is not straight-forward.&lt;/p&gt;
&lt;p&gt;In the docs, you’ll see that a view is no more than a “special” document, so “creating” them is indeed 
straight-forward. What’s not in the docs (yet at least) is that if you’re going to add a view to a large database, 
you’re going to need to have PLENTY of memory. Last night we ran into “eheap_alloc” which took down each of the nodes.&lt;/p&gt;
&lt;p&gt;So - you gotta take your time, and do them serially.&lt;/p&gt;
&lt;p&gt;Unfortunately, the first read of a view over a very large database can take some time. Even a 70 thousand doc 8 GB 
database can take 2 to 4 hours to build even a simple view (which led to the code that added and read them in 
parallel) - go give yourself many days.&lt;/p&gt;
&lt;p&gt;Here’s what top looks like mid-1st read:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;top - &lt;span class="m"&gt;15&lt;/span&gt;:05:54 up &lt;span class="m"&gt;71&lt;/span&gt; days, &lt;span class="m"&gt;17&lt;/span&gt;:26, &lt;span class="m"&gt;1&lt;/span&gt; user, load average: &lt;span class="m"&gt;1&lt;/span&gt;.02, &lt;span class="m"&gt;1&lt;/span&gt;.04, &lt;span class="m"&gt;1&lt;/span&gt;.04
Tasks: &lt;span class="m"&gt;147&lt;/span&gt; total, &lt;span class="m"&gt;1&lt;/span&gt; running, &lt;span class="m"&gt;146&lt;/span&gt; sleeping, &lt;span class="m"&gt;0&lt;/span&gt; stopped, &lt;span class="m"&gt;0&lt;/span&gt; zombie
Cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;11&lt;/span&gt;.5%us, &lt;span class="m"&gt;1&lt;/span&gt;.7%sy, &lt;span class="m"&gt;0&lt;/span&gt;.0%ni, &lt;span class="m"&gt;86&lt;/span&gt;.9%id, &lt;span class="m"&gt;0&lt;/span&gt;.0%wa, &lt;span class="m"&gt;0&lt;/span&gt;.0%hi, &lt;span class="m"&gt;0&lt;/span&gt;.0%si, &lt;span class="m"&gt;0&lt;/span&gt;.0%st
Mem:  16438912k total, 16331660k used,   107252k free,    19048k buffers
Swap: 16771820k total,  8493532k used,  8278288k free,  6754524k cached

  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 &lt;span class="m"&gt;8893&lt;/span&gt; couchdb   &lt;span class="m"&gt;18&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;15&lt;/span&gt;.6g &lt;span class="m"&gt;7&lt;/span&gt;.8g &lt;span class="m"&gt;1944&lt;/span&gt; S    &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;49&lt;/span&gt;.6  &lt;span class="m"&gt;13&lt;/span&gt;:53.09 couchjs
 &lt;span class="m"&gt;2790&lt;/span&gt; couchdb   &lt;span class="m"&gt;25&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;  357m 132m &lt;span class="m"&gt;4180&lt;/span&gt; S    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.8  &lt;span class="m"&gt;76&lt;/span&gt;:06.97 beam.smp
 &lt;span class="m"&gt;2843&lt;/span&gt; couchdb   &lt;span class="m"&gt;25&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;  342m 167m &lt;span class="m"&gt;4116&lt;/span&gt; S   &lt;span class="m"&gt;86&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;.0  &lt;span class="m"&gt;81&lt;/span&gt;:54.23 beam.smp
 &lt;span class="m"&gt;2896&lt;/span&gt; couchdb   &lt;span class="m"&gt;25&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;  175m  17m &lt;span class="m"&gt;3896&lt;/span&gt; S    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.1   &lt;span class="m"&gt;0&lt;/span&gt;:06.73 beam.smp
 &lt;span class="m"&gt;2949&lt;/span&gt; couchdb   &lt;span class="m"&gt;25&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;  171m  14m &lt;span class="m"&gt;3744&lt;/span&gt; S    &lt;span class="m"&gt;0&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.1   &lt;span class="m"&gt;0&lt;/span&gt;:06.03 beam.smp
&lt;span class="m"&gt;32320&lt;/span&gt; couchdb   &lt;span class="m"&gt;18&lt;/span&gt;   &lt;span class="m"&gt;0&lt;/span&gt;  150m 105m &lt;span class="m"&gt;1948&lt;/span&gt; S   &lt;span class="m"&gt;15&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;.7  &lt;span class="m"&gt;13&lt;/span&gt;:36.61 couchjs
&lt;/pre&gt;&lt;/div&gt;</content><category term="bbc-forge"></category><category term="CouchDB"></category><category term="work"></category><category term="NoSQL"></category><category term="how-to"></category></entry><entry><title>Colloquy demystifying JIRA references</title><link href="http://endafarrell.net/colloquy-demystifying-jira-references.html" rel="alternate"></link><published>2009-08-03T20:20:00+02:00</published><updated>2009-08-03T20:20:00+02:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2009-08-03:/colloquy-demystifying-jira-references.html</id><summary type="html">&lt;p&gt;The BBC’s Forge engineering team uses an IRC channel to hold meetings. It allows our team to not bother about exactly 
where everyone is - some folks work from home, people are (mostly) in the office, but can be in different parts of 
our buildings for all sorts of good …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The BBC’s Forge engineering team uses an IRC channel to hold meetings. It allows our team to not bother about exactly 
where everyone is - some folks work from home, people are (mostly) in the office, but can be in different parts of 
our buildings for all sorts of good reasons. So, we have JIRA instead of Agile “task cards” and we use IRC meetings 
instead of “standups”.&lt;/p&gt;
&lt;p&gt;Link in any team, you’ll have some folks working on one aspect of the development, others on others. There’s an 
“idealisation” in many Agile software disciplines that suggests any developer can work on any task, yet this isn’t 
always so. Moreover, once someone is working on an aspect, the rest of the team are probably not going to stay on 
top of all of the JIRA references - yet in IRC we often just list those JIRA numbers to speed ourselves along.&lt;/p&gt;
&lt;p&gt;It’s not at all difficult to link to these references but it takes quite a bit of discipline - and in fairness, I’d 
sooner be concentrating on what folks are saying rather than playing with URLs - hence a new plugin script for 
Colloquy that helps.&lt;/p&gt;
&lt;p&gt;This script works with a small shell script that handles regex (there is an AppleScript plugin that can do this, but 
it’s not really needed for this) to identify a likely JIRA reference and to print out the title of the JIRA ticket.&lt;/p&gt;
&lt;p&gt;First that little shell script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/opt/local/bin/perl&lt;/span&gt;
&lt;span class="nv"&gt;$LINE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;shift&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;$JIRAREF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nv"&gt;$LINE&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;m/(\w+\-\d+)/&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$JIRAREF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="nv"&gt;$JIRAREF&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see it does very little - it finds strings like “FSRV-102”, or “KV-1” and prints it out, otherwise it 
outputs nothing. Quite simple.&lt;/p&gt;
&lt;p&gt;Second the AppleScript Colloquy plugin script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;scriptInitialPath&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nv"&gt;null&lt;/span&gt;
&lt;span class="k"&gt;property&lt;/span&gt; &lt;span class="nv"&gt;loadedScriptName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;using terms from&lt;/span&gt; &lt;span class="nb"&gt;application&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Colloquy&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;process&lt;/span&gt; &lt;span class="nv"&gt;incoming&lt;/span&gt; &lt;span class="nv"&gt;chat&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;msgChatRoom&lt;/span&gt;

    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;frontRoom&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;description&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt; &lt;span class="nb"&gt;panel&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;front&lt;/span&gt; &lt;span class="na"&gt;window&lt;/span&gt;
    &lt;span class="c"&gt;-- to convert a chat room&amp;#39;s name to a chat room&amp;#39;s description, here&amp;#39;s what&lt;/span&gt;
    &lt;span class="c"&gt;-- I needed to do. Depending on how you connect, you may need to change&lt;/span&gt;
    &lt;span class="c"&gt;-- this a little. You&amp;#39;ll know that you do need to change this if you keep&lt;/span&gt;
    &lt;span class="c"&gt;-- getting JIRA titles when your &amp;quot;front room&amp;quot; fills with unexpected JIRA&lt;/span&gt;
    &lt;span class="c"&gt;-- titles! (Then again, perhaps you&amp;#39;d like to know what&amp;#39;s being talked&lt;/span&gt;
    &lt;span class="c"&gt;-- about and don&amp;#39;t mind too much ...)&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;msgChatRoomName&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chat Room #&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;msgChatRoom&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; (127.0.0.1)&amp;quot;&lt;/span&gt;

    &lt;span class="c"&gt;-- check that the message we&amp;#39;re processing is on our front panel&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;msgChatRoomName&lt;/span&gt; &lt;span class="ow"&gt;is equal&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;frontRoom&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;
            &lt;span class="c"&gt;-- the message is a class - not the text, so we have to extract it&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;thisMessage&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;HTML&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt;
            &lt;span class="c"&gt;-- I have a shell script that does the pattern matching. There is&lt;/span&gt;
            &lt;span class="c"&gt;-- an extension to AppleScript that allows for this sort of work,&lt;/span&gt;
            &lt;span class="c"&gt;-- but the Forge community is good with a little Unix and probably&lt;/span&gt;
            &lt;span class="c"&gt;-- don&amp;#39;t mind installing a script.&lt;/span&gt;
            &lt;span class="c"&gt;-- The quotes are necessary as sentences often have spaces ...&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;jiraRef&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/jiraRef.pl \&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;thisMessage&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class="c"&gt;-- call our separate method to handle this&lt;/span&gt;
            &lt;span class="nv"&gt;getJira&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;jiraRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;on&lt;/span&gt; &lt;span class="k"&gt;error&lt;/span&gt;
            &lt;span class="c"&gt;-- annoyingly, AppleScript often fails silently - and I&amp;#39;ve not&lt;/span&gt;
            &lt;span class="c"&gt;-- actually seen this run.&lt;/span&gt;
            &lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt; &lt;span class="nb"&gt;panel&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;front&lt;/span&gt; &lt;span class="na"&gt;window&lt;/span&gt;
                &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nb"&gt;event&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;error caught: &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;errorMessage&lt;/span&gt;
            &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;process&lt;/span&gt; &lt;span class="nv"&gt;incoming&lt;/span&gt; &lt;span class="nv"&gt;chat&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;process&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="nv"&gt;command&lt;/span&gt; &lt;span class="nv"&gt;cmd&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;chatRoom&lt;/span&gt;    
&lt;span class="c"&gt;-- This may be useful as it allows me to check jira refs&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;cmd&lt;/span&gt; &lt;span class="ow"&gt;is equal&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jira&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;jiraLine&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;jiraRef&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/jiraRef.pl \&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="nv"&gt;getJira&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;jiraRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;process&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt; &lt;span class="nv"&gt;command&lt;/span&gt;

&lt;span class="c"&gt;-- I&amp;#39;m sure that in the future I&amp;#39;ll add extra parameters to this so&lt;/span&gt;
&lt;span class="c"&gt;-- that I can get things like when it was last updated, the status&lt;/span&gt;
&lt;span class="c"&gt;-- and who perhaps last commented. But for now it&amp;#39;s simple.&lt;/span&gt;
&lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;getJira&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;jiraRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;jiraRef&lt;/span&gt; &lt;span class="ow"&gt;is not&lt;/span&gt; &lt;span class="ow"&gt;equal to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
        &lt;span class="c"&gt;-- this next ommand is long - I might write this into a seperate&lt;/span&gt;
        &lt;span class="c"&gt;-- script. But again, for now it works and allows me flexibility&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;jiraTitle&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;do shell script&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;curl --cert --pass -k https://JIRA-SERVER/browse/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;jiraRef&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; \&lt;/span&gt;
&lt;span class="s2"&gt;            | grep &amp;#39;&amp;lt;title&amp;gt;&amp;#39; | sed &amp;#39;s/title/em/g&amp;#39; | sed &amp;#39;s/ - BBC JIRA//&amp;#39;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt; &lt;span class="nb"&gt;panel&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;front&lt;/span&gt; &lt;span class="na"&gt;window&lt;/span&gt;
            &lt;span class="c"&gt;--add event message jiraTitle with name &amp;quot;jiraTitle&amp;quot;&lt;/span&gt;
            &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nb"&gt;event&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JIRA &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;jiraTitle&lt;/span&gt;
            &lt;span class="c"&gt;--add event message &amp;quot;&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\&amp;quot;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;jiraTitle&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jiraTitle&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;getJira&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt; &lt;span class="k"&gt;from&lt;/span&gt; &lt;span class="nv"&gt;scriptPath&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;scriptAlias&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;POSIX&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="nv"&gt;scriptPath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nv"&gt;alias&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;loadedScriptName&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;info for&lt;/span&gt; &lt;span class="nv"&gt;scriptAlias&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;loadedScriptName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; Loaded /jira&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as &lt;/span&gt;&lt;span class="nc"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;evt&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;loadedScriptName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;loaded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as &lt;/span&gt;&lt;span class="nc"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt; &lt;span class="nb"&gt;panel&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;front&lt;/span&gt; &lt;span class="na"&gt;window&lt;/span&gt;
        &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nb"&gt;event&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;evt&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;load&lt;/span&gt;

&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;unload&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;loadedScriptName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; Unloaded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as &lt;/span&gt;&lt;span class="nc"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;evt&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;loadedScriptName&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unloaded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as &lt;/span&gt;&lt;span class="nc"&gt;string&lt;/span&gt;
    &lt;span class="k"&gt;tell&lt;/span&gt; &lt;span class="na"&gt;active&lt;/span&gt; &lt;span class="nb"&gt;panel&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;front&lt;/span&gt; &lt;span class="na"&gt;window&lt;/span&gt;
        &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nb"&gt;event&lt;/span&gt; &lt;span class="nv"&gt;message&lt;/span&gt; &lt;span class="nv"&gt;msg&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="na"&gt;name&lt;/span&gt; &lt;span class="nv"&gt;evt&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;tell&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;loadedScriptName&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="nv"&gt;unload&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="k"&gt;using terms from&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, this script - when placed in your &lt;code&gt;~/Library/Application Support/Colloquy/PlugIns&lt;/code&gt; will look at incoming 
messages in your front window (in a hack-tastic way), get the first of the JIRA references (if any), looks at our 
JIRA-SERVER to find the title of these references. The code could do with quite a bit of tidy-up, but it works and for 
the speed at which our team’s messages comes in, it’s fast enough.&lt;/p&gt;</content><category term="Perl"></category><category term="bbc-forge"></category><category term="mac"></category><category term="unix"></category><category term="work"></category><category term="applescript"></category><category term="jira"></category><category term="Colloquy"></category></entry><entry><title>Top 25 Most Dangerous Programming Errors</title><link href="http://endafarrell.net/top-25-most-dangerous-programming-errors.html" rel="alternate"></link><published>2009-08-03T00:00:00+02:00</published><updated>2009-08-03T00:00:00+02:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2009-08-03:/top-25-most-dangerous-programming-errors.html</id><summary type="html">&lt;p&gt;The 2009 CWE/SANS Top 25 Most Dangerous Programming Errors is a list of the most significant programming errors that can
lead to serious software vulnerabilities. They occur frequently, are often easy to find, and easy to exploit. They are
dangerous because they will frequently allow attackers to completely take …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The 2009 CWE/SANS Top 25 Most Dangerous Programming Errors is a list of the most significant programming errors that can
lead to serious software vulnerabilities. They occur frequently, are often easy to find, and easy to exploit. They are
dangerous because they will frequently allow attackers to completely take over the software, steal data, or prevent the 
software from working at all.&lt;/p&gt;
&lt;p&gt;I’ve been going through these today for an internal security review - it’s a very good read with lots of helpful 
analogies. &lt;a href="http://cwe.mitre.org/top25/"&gt;http://cwe.mitre.org/top25/&lt;/a&gt;&lt;/p&gt;</content><category term="bbc-forge"></category><category term="code"></category><category term="security"></category><category term="work"></category></entry><entry><title>Running stunnel at startup</title><link href="http://endafarrell.net/running-stunnel-at-startup.html" rel="alternate"></link><published>2009-07-22T00:00:00+02:00</published><updated>2009-07-22T00:00:00+02:00</updated><author><name>Enda Farrell</name></author><id>tag:endafarrell.net,2009-07-22:/running-stunnel-at-startup.html</id><summary type="html">&lt;p&gt;You might want your stunnels to be running all the time - and to start automatically when you log in. Here’s how:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get your stunnel working. You’ll need to fix your certs, choose the correct ports, and all that yourself.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;write a script (/Users/you/stunnel.sh) that’s …&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;You might want your stunnels to be running all the time - and to start automatically when you log in. Here’s how:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get your stunnel working. You’ll need to fix your certs, choose the correct ports, and all that yourself.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;write a script (/Users/you/stunnel.sh) that’s just like this:&lt;/p&gt;
&lt;h1&gt;!/bin/sh&lt;/h1&gt;
&lt;p&gt;/opt/local/bin/stunnel /opt/local/etc/stunnel/stunnel.conf&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;in a terminal window write this:&lt;/p&gt;
&lt;p&gt;sudo defaults write com.apple.loginwindow LoginHook /Users/you/stunnel.sh&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you’re all set. Next time you login, the LoginHook will fire, running your “stunnel.sh” command which in turn calls 
(with full paths) the stunnel config you’ve got set up.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://support.apple.com/kb/HT2420"&gt;http://support.apple.com/kb/HT2420&lt;/a&gt; has more info about creating LoginHooks&lt;/p&gt;</content><category term="mac"></category><category term="ops"></category><category term="unix"></category><category term="work"></category></entry></feed>